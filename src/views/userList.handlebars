<button id="deleteUsers">Eliminar usuarios desconectados hace mas de 2 dias</button>
<table>
    <thead>
        <th>name</th>
        <th>last name</th>
        <th>role</th>
        <th>last connection</th>
    </thead>
    <tbody>
        {{#each users}}
            <tr>
                <td>{{this.first_name}}</td>
                <td>{{this.last_name}}</td>
                <td>
                  <form action="">
                    <select name="role" id="roleSelect">
                      <option value="admin" {{#compare this.rol '===' 'admin'}} selected {{/compare}}>Admin</option>
                      <option value="premium" {{#compare this.rol '===' 'premium' }}selected {{/compare}}>Premium</option>
                      <option value="usuario" {{#compare this.rol '===' 'usuario'}} selected {{/compare}}>Usuario</option>
                    </select>
                    <button onclick="changeUserRole(event, '{{this._id}}')">Cambiar</button>
                  </form>
                </td>
                <td class="date">{{this.last_connection}}</td>
                <td><button onclick="deleteUser('{{this._id}}')">Eliminar</button></td>
            </tr>
        {{/each}}
    </tbody>
</table>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    // Obten todos los elementos td con la clase "date"
    const dateTds = document.querySelectorAll(".date");

    // Itera sobre cada elemento td
    dateTds.forEach(function(dateTd) {
      // ObtÃ©n la fecha y hora en formato ISO
      const fechaDB = dateTd.textContent;
      
      // Crea un objeto Date a partir de la cadena de fecha y hora
      const fechaFormateada = new Date(fechaDB).toLocaleString('es-AR', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
     
      });

      // Actualiza el contenido del td con la fecha formateada
      dateTd.textContent = fechaFormateada;
    });
  });

  document.addEventListener("DOMContentLoaded", () => {
    const btn = document.getElementById("deleteUsers");

    btn.addEventListener("click", async () => {
      try {
        const response = await fetch('/api/sessions/delete-users-disconnect',{
          method: "DELETE"
        });
        const data = await response.json();
        console.log(response)
        if (response.ok) {
          console.log( data.message);
          setTimeout(() => {
            location.reload();
          }, 1000)
        } else {
          console.error( data.message);
        }
      } catch (error) {
        console.error('Error al realizar la solicitud:', error);
      }
    });
  });

  const deleteUser = async (id) => {
    try{
      const response = await fetch(`/api/sessions/delete-user/${id}`,{
        method: "DELETE"
      })
      const data = await response.json()
      if (response.ok) {
          console.log(data.message);
          setTimeout(() => {
            location.reload();
          }, 500)
        } else {
          console.error(data.message);
        }
      } catch (error) {
        console.error('Error al realizar la solicitud:', error);
      }
  }

  const changeUserRole = async (e, id) => {
    try{
      e.preventDefault()
      const rol = document.getElementById('roleSelect').value;
      console.log(rol)
      const response = await fetch (`/api/sessions/change-role/${id}`,{
        method:'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({rol})
      })
  
      const data = await response.json()
 
      if(response.ok){
        console.log(data.message);
      }
      else {
        console.log(data.message);
      }
    } catch (error){
      console.log(error.message)
    }
  }
</script>


